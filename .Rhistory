## hrbrthemes::ipsum:
knitr::opts_chunk$set(fig.retina=2, echo = FALSE, fig.align = 'center', message = F, warning = F)
library(prettydoc)
library(hrbrthemes, quietly = T)
#library(GenomicFeatures, quietly = T)
library(DESeq2, quietly = T)
library(ggpubr, quietly = T)
#library(misc, quietly = T)
library(dplyr, quietly = T)
#library(tidyverse, quietly = T)
library(ggsci, quietly = T)
#library(Gviz, quietly = T)
library(dplyr, quietly = T)
library(tidyr)
library(scales)
#library(plyr)
library(moanin, quietly = T)
library(grid, quietly = T)
library(gridExtra, quietly = T)
library(ggpubr, quietly = T)
library(data.table)
library(ggh4x)
library(knitr)
library(formattable)
library(stageR); library(edgeR) ; library(Biobase) ; library(limma) ; library(utils) ; library(DEXSeq)
###
viral.ref <- "NC_001491.2.mRNA_corrected.gff3"
source('_WF.part0.R')
#### Settings ####
## Main
#save.data <- 'PRV.rebase.RData'
EndType <- 'CAGE'
project_config  <- fread('project_config.txt')
outdir  <- project_config$outdir
res.dir <- outdir; try({ dir.create(res.dir) })
fig.dir <- paste0(res.dir, '/', EndType); try({ dir.create(fig.dir) })## save plots to this directory
## Miscallenaous
colorvec <- na.omit(c(
colorvec[c(1:5,15,13,10,24,7,26,32,33)],
colorvec[-c(1:5,15,13,10,24,7,26,32,33)]))
colorvec <- colorvec[-c(9,13)]
palette  <- colorvec #pal_npg()(10)
writetables <- T
#### For Gene/Transcript plotting
## Gene Feature annotation
genome.plotdata <- make.genome.plot.data(feature.df, feature.col = 8, feature.name = 'ID')
genome.plotdata$strand <- factor(genome.plotdata$strand, levels = c('+', '-', '*'))
gene.plotdata <- genome.plotdata
## GENE NAMES !
gene.plotdata$gene_name <- gsub('_.*', '', gene.plotdata$gene)
#gene.plotdata$start > gene.plotdata$end
## Misc
alpha <- data.frame(cov_geom        = 0.6,
gene_geom       = 0.75,
unstranded_geom = 0.75)
TR.gff.compare.uni.CAGE     <- fread(paste0(outdir, '/TR.gff.compare.uni.CAGE.tsv'), na.strings = '')
TR.data <- fread(paste0(outdir, '/TR.data.tsv'), na.strings = '')
TR.reads.gfffile <- paste0(outdir, '/TR.reads.gff2')
TR.gff <- data.table(as.data.frame(rtracklayer::import.gff2(TR.reads.gfffile)))
#### Import transcript and gene (cluster) counts
TR.gene.cluster <- fread(paste0(outdir, '/', 'TR.gene.cluster.tsv'), na.strings = '')
#### Import Toram et al annotation transferred from Kaplan
source('import.ref.TRs.R')
#### Import transcript and gene (cluster) counts
TR.gene.cluster <- fread(paste0(outdir, '/', 'TR.gene.cluster.tsv'), na.strings = '')
#### Import Toram et al annotation transferred from Kaplan
source('import.ref.TRs.R')
#### Reference annotation with CAGE results
TR.merged.data <- fread(paste0(outdir, '/TR.Ref.data.CAGE.tsv'))
#### Read-transcripts counts with adapter info
TR.adapt.count  <- fread(paste0(outdir, '/TR.adapt.count.tsv'), na.strings = '')
#### consider adapters?
# possible values : adapters <- 'both' | 'either' | 'any' | 'prime5' | 'prime3'
adapters <- 'both'
if(adapters == 'both') {
TR.adapt.filt <- TR.adapt.count[correct_tss == T & correct_tes == T]
} else if(adapters == 'either') {
TR.adapt.filt <- TR.adapt.count[correct_tss == T | correct_tes == T, .(count = sum(count)), by=.(seqnames, strand, TR_ID, sample)]
} else if(adapters == 'any') {
TR.adapt.filt <- TR.adapt.count[, .(count = sum(count)), by=.(seqnames, strand, TR_ID, sample)]
} else if(adapters == 'prime5') {
TR.adapt.filt <- TR.adapt.count[correct_tss == T, .(count = sum(count)), by=.(seqnames, strand, TR_ID, sample)]
} else if(adapters == 'prime3') {
TR.adapt.filt <- TR.adapt.count[correct_tes == T, .(count = sum(count)), by=.(seqnames, strand, TR_ID, sample)]
}
setnames(TR.adapt.filt, 'TR_ID', 'transcript_id')
###### Merge with read-transcript counts (possible filtered) #####
TR.gene.cluster.counts <- merge(TR.gene.cluster,
TR.adapt.filt[,.(sample, transcript_id, count)],
by=c('transcript_id')
#all.x=T,
#allow.cartesian=TRUE
)
#### summarise read-transcripts into ref transcripts
TR.ref.sum      <- TR.gene.cluster.counts[,.(read_count = sum(count)),
by=.(seqnames, gene_region, gene_cluster, gene, cmp_ref, Ref_Class, class_code, Kinetic_class, sample)]
## melt to get 0 counts
orf.counts <- dcast(TR.ref.sum, seqnames + gene_region + gene_cluster + gene + Kinetic_class + Ref_Class + class_code + cmp_ref ~ sample, value.var = 'read_count')
orf.perc   <- melt(orf.counts, variable.name = 'sample', value.name = 'read_count', id.vars = colnames(orf.counts)[1:8])
orf.perc[is.na(read_count), read_count := 0]
TR.ref.sum   <- orf.perc
## merge back for transcript strand
TR.ref.sum  <- merge(unique(TR.genes[,.(seqnames, strand, transcript_id)]),
TR.ref.sum, by.y=c('seqnames', 'cmp_ref'), by.x=c('seqnames', 'transcript_id'))
setnames(TR.ref.sum, 'transcript_id', 'cmp_ref')
## and metadata
TR.ref.sum  <- merge(TR.ref.sum, metafilt[,metacols], by=c('sample'), all.x=T)
## Factorize Kinetic classes
TR.ref.sum[is.na(Kinetic_class), Kinetic_class := 'unknown']
TR.ref.sum[,Kinetic_class := factor(Kinetic_class, levels = c('IE', 'IE/E', 'E', 'IE/E/L', 'E/L', 'L', 'unknown'))]
